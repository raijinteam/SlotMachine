using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using System;
using Random = UnityEngine.Random;

public class Exploit : MonoBehaviour
{
   
    [SerializeField] private RectTransform rectTransform;
    [SerializeField] private int increasingCoinPerantageWhenChain;
    [SerializeField] private int persantageOfCoinValue;
    [SerializeField] private float flt_StopAnimationTime;
    [SerializeField] private float yOffset;

    private int bitcoinSymboleIndex = 1;
    private int cardanoCoinIndex = 2;
    private int ethCoinSymboleIndex = 3;
    private int stableCoinIndex = 4;



    public void Instance_SetSynergy() {
        CheckChain();
        int index = Random.Range(0, 100);
        if (index< persantageOfCoinValue) {
            CoinVaue2x();
        }
    }

    private void CheckChain() {
        for (int i = 0; i < PowerupManager.instance.list_ActivePessiveInHirechy.Count; i++) {
            if (PowerupManager.instance.list_ActivePessiveInHirechy[i].TryGetComponent<EthChain>(out EthChain ethChain)) {
                persantageOfCoinValue += increasingCoinPerantageWhenChain;
               
            }
        }
    }

    private void CoinVaue2x() {

        for (int i = 0; i < GridManager.instance.list_ActivateInHirachy.Count; i++) {

            if (bitcoinSymboleIndex == GridManager.instance.list_ActivateInHirachy[i].GetComponent<SymbolData>().mySymbolIndex) {

                BitCoin bitCoin = GridManager.instance.list_ActivateInHirachy[i].GetComponent<BitCoin>();
                bitCoin.BaseValue *= 2;
                GridManager.instance.list_ActivateInHirachy[i].GetComponentInParent<RawMotion>().VFXForMOtion();
                StopAnimation();
            }
            else if (cardanoCoinIndex == GridManager.instance.list_ActivateInHirachy[i].GetComponent<SymbolData>().mySymbolIndex) {

                CardanoCoin cardanoCoin = GridManager.instance.list_ActivateInHirachy[i].GetComponent<CardanoCoin>();
                cardanoCoin.BaseValue *= 2;
               
                GridManager.instance.list_ActivateInHirachy[i].GetComponentInParent<RawMotion>().VFXForMOtion();
                StopAnimation();

            }
            else if (ethCoinSymboleIndex == GridManager.instance.list_ActivateInHirachy[i].GetComponent<SymbolData>().mySymbolIndex) {

                ETHCoin eTHCoin = GridManager.instance.list_ActivateInHirachy[i].GetComponent<ETHCoin>();
                eTHCoin.BaseValue *= 2;
              
                GridManager.instance.list_ActivateInHirachy[i].GetComponentInParent<RawMotion>().VFXForMOtion();
                StopAnimation();

            }
            else if (stableCoinIndex == GridManager.instance.list_ActivateInHirachy[i].GetComponent<SymbolData>().mySymbolIndex) {

                StableCoin stableCoin = GridManager.instance.list_ActivateInHirachy[i].GetComponent<StableCoin>();
                stableCoin.BaseValue *= 2;  
                GridManager.instance.list_ActivateInHirachy[i].GetComponentInParent<RawMotion>().VFXForMOtion();
                StopAnimation();
            }


        }
    }

    private void StopAnimation() {

        Sequence SEQ = DOTween.Sequence();

        float startPostion = rectTransform.localPosition.y;
        SEQ.Append(rectTransform.DOLocalMoveY(startPostion - yOffset, flt_StopAnimationTime)).SetEase(Ease.Linear).
           Append(rectTransform.DOLocalMoveY(startPostion + yOffset, flt_StopAnimationTime).SetLoops(3, LoopType.Yoyo)).SetEase(Ease.Linear)
           .Append(rectTransform.DOLocalMoveY(startPostion, flt_StopAnimationTime).SetEase(Ease.Linear));


    }
}
